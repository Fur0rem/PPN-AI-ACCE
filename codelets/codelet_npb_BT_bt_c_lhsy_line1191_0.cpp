/**
 * @file codelets/codelet_polybench_bt_c_lhsy_line1191_0.cpp
 * @brief Benchmark extracted from the NAS Parallel Benchmarks (NPB) bt_c_lhsy_line1191_0 codelet
 */

#include "bench_common.hpp"

int i = 4;
int grid_points[3] = {64, 64, 64};
int j = 32767;
int k = -134270976;
double u[(64 + 1) / 2 * 2 + 1][(64 + 1) / 2 * 2 + 1][(64 + 1) / 2 * 2 + 1][5];
double fjac[64 / 2 * 2 + 1][64 / 2 * 2 + 1][64 - 1 + 1][5][5];
double c2 = 0.400000;
double c1 = 1.400000;
double njac[64 / 2 * 2 + 1][64 / 2 * 2 + 1][64 - 1 + 1][5][5];
double c3c4 = 0.100000;
double con43 = 1.333333;
double c1345 = 0.196000;

OPTIMISE_SIZE
BENCHMARK_FN(bt_c_lhsy_line1191_loop_c_0_c, {
	int __arr_sub_0__ = grid_points[0];
	int __arr_sub_1__ = grid_points[1];
	int __arr_sub_2__ = grid_points[2];
	int __i_3__ = i;
	double __tmp1_4__;
	double __tmp2_5__;
	double __tmp3_6__;
	int __j_7__ = j;
	int __k_8__ = k;

	{
		for (__i_3__ = 1; __i_3__ <= __arr_sub_0__ - 1 - 1; __i_3__ += 1) {
			for (__j_7__ = 0; __j_7__ <= __arr_sub_1__ - 1; __j_7__ += 1) {
				for (__k_8__ = 1; __k_8__ <= __arr_sub_2__ - 1 - 1; __k_8__ += 1) {
					__tmp1_4__ = 1.0 / u[__i_3__][__j_7__][__k_8__][0];
					__tmp2_5__ = __tmp1_4__ * __tmp1_4__;
					__tmp3_6__ = __tmp1_4__ * __tmp2_5__;
					fjac[__i_3__][__j_7__][__k_8__][0][0] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][0][1] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][0][2] = 1.0;
					fjac[__i_3__][__j_7__][__k_8__][0][3] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][0][4] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][1][0] =
						-(u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][2]) * __tmp2_5__;
					fjac[__i_3__][__j_7__][__k_8__][1][1] = u[__i_3__][__j_7__][__k_8__][2] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][1][2] = u[__i_3__][__j_7__][__k_8__][1] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][1][3] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][1][4] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][2][0] =
						-(u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][2] * __tmp2_5__) +
						0.5 * c2 *
							((u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][1] +
							  u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][2] +
							  u[__i_3__][__j_7__][__k_8__][3] * u[__i_3__][__j_7__][__k_8__][3]) *
							 __tmp2_5__);
					fjac[__i_3__][__j_7__][__k_8__][2][1] = -c2 * u[__i_3__][__j_7__][__k_8__][1] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][2][2] = (2.0 - c2) * u[__i_3__][__j_7__][__k_8__][2] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][2][3] = -c2 * u[__i_3__][__j_7__][__k_8__][3] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][2][4] = c2;
					fjac[__i_3__][__j_7__][__k_8__][3][0] =
						-(u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][3]) * __tmp2_5__;
					fjac[__i_3__][__j_7__][__k_8__][3][1] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][3][2] = u[__i_3__][__j_7__][__k_8__][3] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][3][3] = u[__i_3__][__j_7__][__k_8__][2] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][3][4] = 0.0;
					fjac[__i_3__][__j_7__][__k_8__][4][0] = (c2 *
																 (u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][1] +
																  u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][2] +
																  u[__i_3__][__j_7__][__k_8__][3] * u[__i_3__][__j_7__][__k_8__][3]) *
																 __tmp2_5__ -
															 c1 * u[__i_3__][__j_7__][__k_8__][4] * __tmp1_4__) *
															u[__i_3__][__j_7__][__k_8__][2] * __tmp1_4__;
					fjac[__i_3__][__j_7__][__k_8__][4][1] =
						-c2 * u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][2] * __tmp2_5__;
					fjac[__i_3__][__j_7__][__k_8__][4][2] = c1 * u[__i_3__][__j_7__][__k_8__][4] * __tmp1_4__ -
															0.5 * c2 *
																((u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][1] +
																  3.0 * u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][2] +
																  u[__i_3__][__j_7__][__k_8__][3] * u[__i_3__][__j_7__][__k_8__][3]) *
																 __tmp2_5__);
					fjac[__i_3__][__j_7__][__k_8__][4][3] =
						-c2 * (u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][3]) * __tmp2_5__;
					fjac[__i_3__][__j_7__][__k_8__][4][4] = c1 * u[__i_3__][__j_7__][__k_8__][2] * __tmp1_4__;
					njac[__i_3__][__j_7__][__k_8__][0][0] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][0][1] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][0][2] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][0][3] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][0][4] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][1][0] = -c3c4 * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][1];
					njac[__i_3__][__j_7__][__k_8__][1][1] = c3c4 * __tmp1_4__;
					njac[__i_3__][__j_7__][__k_8__][1][2] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][1][3] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][1][4] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][2][0] = -con43 * c3c4 * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][2];
					njac[__i_3__][__j_7__][__k_8__][2][1] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][2][2] = con43 * c3c4 * __tmp1_4__;
					njac[__i_3__][__j_7__][__k_8__][2][3] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][2][4] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][3][0] = -c3c4 * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][3];
					njac[__i_3__][__j_7__][__k_8__][3][1] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][3][2] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][3][3] = c3c4 * __tmp1_4__;
					njac[__i_3__][__j_7__][__k_8__][3][4] = 0.0;
					njac[__i_3__][__j_7__][__k_8__][4][0] =
						-(c3c4 - c1345) * __tmp3_6__ * (u[__i_3__][__j_7__][__k_8__][1] * u[__i_3__][__j_7__][__k_8__][1]) -
						(con43 * c3c4 - c1345) * __tmp3_6__ * (u[__i_3__][__j_7__][__k_8__][2] * u[__i_3__][__j_7__][__k_8__][2]) -
						(c3c4 - c1345) * __tmp3_6__ * (u[__i_3__][__j_7__][__k_8__][3] * u[__i_3__][__j_7__][__k_8__][3]) -
						c1345 * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][4];
					njac[__i_3__][__j_7__][__k_8__][4][1] = (c3c4 - c1345) * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][1];
					njac[__i_3__][__j_7__][__k_8__][4][2] = (con43 * c3c4 - c1345) * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][2];
					njac[__i_3__][__j_7__][__k_8__][4][3] = (c3c4 - c1345) * __tmp2_5__ * u[__i_3__][__j_7__][__k_8__][3];
					njac[__i_3__][__j_7__][__k_8__][4][4] = c1345 * __tmp1_4__;
				}
			}
		}
	}

	i = __i_3__;
	j = __j_7__;
	k = __k_8__;
})

/**
 * @brief Run the benchmarks for bt_c_lhsy_line1191_loop_c_0_c
 */
int main() {
	std::ostringstream oss;
	auto result = BENCHMARK_INIT(10, oss).RUN(bt_c_lhsy_line1191_loop_c_0_c).results();

	// std::cout << oss.str();

	for (auto const& res : result) {
		auto measure = res.fromString("cpucycles");
		auto name = res.config().mBenchmarkName;
		std::cout << name << " : ";
		std::cout << res.median(measure) << " cycles\n";
	}

	return 0;
}