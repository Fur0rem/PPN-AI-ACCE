# Naive Multiplication, Min: 3.03209s, Max: 3.03602s, Med: 3.03258s
# Sparse Multiplication, Min: 0.811475s, Max: 0.812206s, Med: 0.811583s
# Blocked-8 Sparse Multiplication, Min: 1.34089s, Max: 1.35019s, Med: 1.34465s
# Blocked-16 Sparse Multiplication, Min: 1.13534s, Max: 1.13805s, Med: 1.1362s
# Blocked-32 Sparse Multiplication, Min: 1.06327s, Max: 1.06684s, Med: 1.06522s
# Eigen Sparse Multiplication, Min: 1.2649s, Max: 1.44142s, Med: 1.38434s
# Eigen Multiplication, Min: 0.0171376s, Max: 0.0176137s, Med: 0.0175167s

results = {
	"Naive Dense": {
		"Min": 3.03209,
		"Max": 3.03602,
		"Median": 3.03258,
	},
	"Naive Sparse": {
		"Min": 0.811475,
		"Max": 0.812206,
		"Median": 0.811583,
	},
	"Blocked (32) Sparse": {
		"Min": 1.06327,
		"Max": 1.06684,
		"Median": 1.06522,
	},
	"Eigen Sparse": {
		"Min": 1.2649,
		"Max": 1.44142,
		"Median": 1.38434,
	},
	"Eigen Dense": {
		"Min": 0.0171376,
		"Max": 0.0176137,
		"Median": 0.0175167
	}
}

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def plot_sparse_multiplication_benchmarks(results):
	# Create a DataFrame from the results
	data = {
		"Method": [],
		"Time (ms)": [],
	}
	for method, times in results.items():
		data["Method"].append(method)
		data["Time (ms)"].append(times["Median"])

	df = pd.DataFrame(data)

	# Plot the results
	plt.figure(figsize=(10, 6))
	plt.bar(df["Method"], df["Time (ms)"], color="skyblue", edgecolor="black")
	# Add some text above the bars to show median time and error
	for i, row in df.iterrows():
		plt.text(i, row["Time (ms)"], f"{row['Time (ms)'] * 1000:.1f} Â± {((results[row['Method']]['Max'] - results[row['Method']]['Min'])/2) * 1000:.2f}ms", ha='center', va='bottom')
	plt.xticks()
	plt.ylabel("Time (ms)", fontsize=14)
	plt.xlabel("Method", fontsize=14)
	# plt.title("Sparse Multiplication Benchmarks")
	plt.grid(axis='y', alpha = 0.5)
	plt.tight_layout()
	plt.savefig("sparse_multiplication_benchmarks.svg", dpi=300, bbox_inches='tight')
	plt.show()

plot_sparse_multiplication_benchmarks(results)

batch_sparse_results = [
	0.000518926,
	0.000617171,
	0.000558545,
	0.000634378,
	0.000589423,
	0.000626272,
	0.000498217,
	0.000946991,
	0.000592414,
	0.000769968,
	0.000398626,
	0.000756462,
	0.000678756,
	0.000759267,
	0.000673756,
	0.000640755,
	0.000667445,
	0.000688425,
	0.000655352,
	0.000786138,
	0.000337404,
	0.000745407,
	0.0005451,
	0.000608129,
	0.00036007,
	0.000649872,
	0.000402066,
	0.000658699,
	0.00051332,
	0.00063573,
	0.00051015,
	0.000687002,
	0.000619214,
	0.000653294,
	0.000367701,
	0.000648239,
	0.000573494,
	0.000662305,
	0.000599953,
	0.000649281,
	0.000653544,
	0.000610688,
	0.0006329,
	0.00063551,
	0.000589804,
	0.000643029,
	0.00055304,
	0.000615117,
	0.000446886,
	0.000651345,
	0.000406985,
	0.000631322,
	0.000631528,
	0.00068089,
	0.000553911,
	0.000633917,
	0.000698759,
	0.000667585,
	0.00063824,
	0.000629754,
	0.000669529,
	0.000673647,
	0.000669634,
	0.000630947,
	0.00062221,
	0.000653278,
	0.000757063,
	0.000963902,
	0.000636226,
	0.000632144,
	0.000736715,
	0.000807749,
	0.000664945,
	0.000657832,
	0.000414068,
	0.00108511,
	0.00059072,
	0.000660271,
	0.000634508,
	0.000671081,
	0.000387799,
	0.000665902,
	0.000637274,
	0.000630235,
	0.000622811,
	0.000634403,
	0.00043598,
	0.000642112,
	0.000505461,
	0.000663267,
	0.00061386,
	0.000651575,
	0.000510079,
	0.000652798,
	0.00059317,
	0.000664309,
	0.000616684,
	0.000642744,
	0.000661454,
	0.000615267,
	0.000506493,
	0.000654441,
	0.000614355,
	0.000619966,
	0.00040073,
	0.000657557,
	0.000526776,
	0.000688189,
	0.000599757,
	0.000652888,
	0.000680124,
	0.000686145,
	0.00053742,
	0.000762193,
	0.000646706,
	0.000681872,
	0.0011566,
	0.000955606,
	0.000592163,
	0.000666774,
	0.000534285,
	0.000667686,
	0.000504087,
	0.000634067,
	0.000425643,
	0.000649757,
	0.000607322,
	0.000710145,
	0.000526309,
	0.00063555,
	0.000551907,
	0.000640494,
	0.000621143,
	0.000659089,
	0.000336392,
	0.0012436,
	0.000536869,
	0.000655728,
	0.000542996,
	0.000730554,
	0.000410507,
	0.000626338,
	0.000592895,
	0.000642072,
	0.000640885,
	0.000672664,
	0.000605559,
	0.00067833,
	0.00058538,
	0.000646546,
	0.000557849,
	0.000695413,
	0.000446506,
	0.000657046,
	0.000547039,
	0.000648469,
	0.000353658,
	0.000695217,
	0.00046006,
	0.000657967,
	0.000492451,
	0.000647147,
	0.000501513,
	0.00065408,
	0.000606561,
	0.000627931,
	0.000827751,
	0.000684878,
	0.000524892,
	0.000689917,
	0.000632489,
	0.00067005,
	0.000602889,
	0.000650062,
	0.000598771,
	0.000643129,
	0.000618859,
	0.000787069,
	0.000629794,
	0.000683726,
	0.000635881,
	0.000668337,
	0.000601777,
	0.000685448,
	0.000452931,
	0.000644496,
	0.000398666,
	0.000671292,
	0.000404985,
	0.000622591,
	0.000587585,
	0.000647688,
	0.000450467,
	0.00064886,
	0.000357048,
	0.000650984,
	0.000517518,
	0.00101185,
	0.000641587,
	0.000684853,
	0.000506082,
	0.000634744,
	0.00120755,
	0.000985664,
	0.000522442,
	0.000694125,
	0.000609176,
	0.000799813,
	0.000511537,
	0.000957099,
	0.000619294,
	0.000689186,
	0.000341726,
	0.000660682,
	0.000665711,
	0.000680875,
	0.000601355,
	0.000621769,
	0.000435405,
	0.000669919,
	0.000547244,
	0.000635815,
	0.000549463,
	0.000641065,
	0.000633892,
	0.000676622,
	0.000577922,
	0.000680349,
	0.000746473,
	0.000722839,
	0.000628552,
	0.00103421,
	0.000673326,
	0.000642488,
	0.000387739,
	0.000775328,
	0.00127882,
	0.000628236,
	0.000576218,
	0.000632504,
	0.000634873,
	0.000619315,
	0.000617135,
	0.000678261,
	0.000577967,
	0.000637554,
	0.000694807,
	0.000634523,
	0.000610568,
	0.000660953,
	0.000417819,
	0.00067554,
	0.000359983,
	0.000667946,
	0.000671583,
	0.00101881,
	0.000572812,
	0.000734161,
	0.000681466,
	0.000676592,
	0.000597814,
	0.000638346,
	0.000622806,
	0.000662245,
	0.000633807,
	0.000653314,
	0.000223428,
	0.000650693,
	0.00054232,
	0.00061945,
	0.000814912,
	0.000910192,
	0.000480103,
	0.000661423,
	0.000586383,
	0.000672464,
	0.000546087,
	0.000652226,
	0.000580732,
	0.000660171,
	0.00056383,
	0.000678816,
	0.000574229,
	0.000637123,
	0.000612346,
	0.000682784,
	0.000395026,
	0.000703438,
	0.000660838,
	0.000671177,
	0.000477102,
	0.000646476,
	0.000505446,
	0.000666518,
	0.000792269,
	0.000682914,
	0.000493513,
	0.000685138,
	0.000512348,
	0.000663778,
	0.000662506,
	0.000679958,
	0.000410014,
	0.000699315,
	0.000608484,
	0.000676031,
	0.000517744,
	0.000677333,
	0.000597354,
	0.000652056,
	0.000646716,
	0.00064634,
	0.000665912,
	0.000867471,
	0.000514958,
	0.000652051,
	0.000673967,
	0.00064352,
	0.00063832,
	0.000699501,
	0.000605769,
	0.0007974,
	0.000493122,
	0.000676858,
	0.000702826,
	0.000634022,
	0.000600504,
	0.000652903,
	0.000299871,
	0.000644657,
	0.000644181,
	0.000682012,
	0.000487832,
	0.000644757,
	0.000623097,
	0.000659245,
	0.000602658,
	0.000658989,
	0.000450067,
	0.0010136,
	0.000530136,
	0.000642478,
	0.000610107,
	0.000681241,
	0.000707069,
	0.000666849,
	0.000613319,
	0.000647968,
	0.000594543,
	0.000876629,
	0.000642288,
	0.000658223,
	0.000450342,
	0.000674383,
	0.000646731,
	0.000672434,
	0.000586538,
	0.000668988,
	0.000726656,
	0.000655387,
	0.000403846,
	0.000629704,
	0.000437412,
	0.000684417,
	0.000636171,
	0.000642468,
	0.00056383,
	0.00066472,
	0.000512017,
	0.000749104,
	0.000294827,
	0.000686626,
	0.000364639,
	0.000663363,
	0.000546778,
	0.000646275,
	0.000368112,
	0.000654731,
	0.000613984,
	0.000697913,
	0.000526444,
	0.000654706,
	0.00093078,
	0.000628437,
	0.00138053,
	0.000688124,
	0.000614501,
	0.000693293,
	0.000617536,
	0.000747315,
	0.000656084,
	0.000650488,
	0.000538457,
	0.000666894,
	0.000586503,
	0.000683234,
	0.000580176,
	0.000671492,
	0.000565769,
	0.000653238,
	0.000577806,
	0.000652502,
	0.000642353,
	0.000650989,
	0.000616794,
	0.000665471,
	0.00039609,
	0.00102296,
	0.000520814,
	0.00064911,
	0.000569581,
	0.000646165,
	0.000637268,
	0.000626363,
	0.000583482,
	0.00064119,
	0.000601831,
	0.00065405,
	0.000593476,
	0.00069641,
	0.000588592,
	0.00064351,
	0.000617897,
	0.000626168,
	0.0006197,
	0.000652532,
	0.000485794,
	0.000594788,
	0.000497897,
	0.000627676,
	0.000401069,
	0.000667695,
	0.000643265,
	0.000630265,
	0.000768204,
	0.000664274,
	0.000604211,
	0.000561485,
	0.000501147,
	0.000668803,
	0.000578077,
	0.000668927,
	0.000628202,
	0.000655453,
	0.000632158,
	0.00071829,
	0.000574946,
	0.000729332,
	0.000621639,
	0.00070182,
	0.000525774,
	0.000672845,
	0.000530428,
	0.000642608,
	0.000270522,
	0.000665711,
	0.000532786,
	0.000645644,
	0.000592989,
	0.000644367,
	0.000388861,
	0.000726015,
	0.000609687,
	0.000625456,
	0.000530072,
	0.000641135,
	0.000619795,
	0.000660111,
	0.00051597,
	0.000661038,
	0.000655117,
	0.000751944,
	0.000508641,
	0.000635505,
	0.000752865,
	0.000984,
	0.000582716,
	0.000610678,
	0.000476997,
	0.000635204,
	0.000519316,
	0.000605719,
	0.000351686,
	0.000650914,
	0.00038854,
	0.000739431,
	0.000670671,
	0.000668753,
	0.000563409,
	0.000646892,
	0.0006596,
	0.00072884,
	0.000621238,
	0.000696409,
	0.000632529,
	0.000639076,
	0.000543532,
	0.000661399,
	0.000591613,
	0.000656815,
	0.000611174,
	0.000642548,
	0.000567482,
	0.000660212,
	0.000769647,
	0.00065145,
	0.0006008,
	0.000704354,
	0.00060886,
	0.000655527,
	0.000700482,
	0.000785196,
	0.000267106,
	0.000969693,
	0.000572427,
	0.000645274,
	0.000737006,
	0.000640154,
	0.000538077,
	0.000632474,
	0.000680109,
	0.000634283,
	0.000246604,
	0.000669088,
	0.000651305,
	0.000653504,
	0.000673532,
	0.000616895,
	0.000675906,
	0.000716557,
	0.000570463,
	0.000680209,
	0.000613258,
	0.000653243,
	0.000666673,
	0.000641942,
	0.000565373,
	0.00064639,
	0.000506442,
	0.00066508,
	0.000677794,
	0.000665021,
	0.000533428,
	0.000949715,
	0.000720835,
	0.000652141,
	0.000286996,
	0.000669639,
	0.000611464,
	0.000657877,
	0.000598725,
	0.000656184,
	0.000607391,
	0.000660016,
	0.000616124,
	0.000687037,
	0.000571384,
	0.000648985,
	0.000766701,
	0.000658814,
	0.000569821,
	0.000640665,
	0.000624785,
	0.000662385,
	0.000452752,
	0.000668637,
	0.000501833,
	0.000635124,
	0.000529451,
	0.000644617,
	0.00111706,
	0.000701469,
	0.00056409,
	0.000715685,
	0.000485779,
	0.000666273,
	0.000673336,
	0.000679693,
	0.000551252,
	0.000841382,
	0.000639422,
	0.000699796,
	0.000304903,
	0.000769738,
	0.000477623,
	0.00064342,
	0.000617872,
	0.000656384,
	0.000598596,
	0.00065655,
	0.000268199,
	0.000657235,
	0.000678315,
	0.00064618,
	0.000572917,
	0.000653785,
	0.000674288,
	0.000647322,
	0.000676342,
	0.00063816,
	0.000517894,
	0.000673807,
	0.000647848,
	0.000646881,
	0.000595881,
	0.000641146,
	0.000559407,
	0.000654986,
	0.000528484,
	0.000740642,
	0.000332582,
	0.000905222,
	0.000516912,
	0.000628993,
	0.000867441,
	0.000679999,
	0.000617612,
	0.000605479,
	0.000508206,
	0.000644767,
	0.000650919,
	0.000636517,
	0.000313883,
	0.00066196,
	0.000381758,
	0.000608685,
	0.000410988,
	0.000678661,
	0.000535316,
	0.000653488,
	0.000759919,
	0.000689637,
	0.000681992,
	0.000683831,
	0.000655773,
	0.0012224,
	0.000685619,
	0.000666178,
	0.0005374,
	0.000667555,
	0.000539028,
	0.000653549,
	0.000389208,
	0.000647573,
	0.000598155,
	0.000617992,
	0.000555564,
	0.00079256,
	0.000697031,
	0.000651715,
	0.000601727,
	0.000640044,
	0.000501438,
	0.000678776,
	0.000634959,
	0.00066216,
	0.000630516,
	0.000670461,
	0.000544323,
	0.000651901,
	0.000619931,
	0.000651244,
	0.000546993,
	0.000661284,
	0.000608955,
	0.000671823,
	0.000396171,
	0.000699485,
	0.000637709,
	0.000656614,
	0.00074461,
	0.000651119,
	0.000578643,
	0.000648995,
	0.000687162,
	0.000683716,
	0.000364191,
	0.00064592,
	0.000791588,
	0.00100426
]

# No sparse results:
# Average results: Min: 0.000642849s, Max: 0.000845439s, Mean: 0.000685682s
# Sparse results:
# Average results: Min: 0.000527373s, Max: 0.000743689s, Mean: 0.000575437s
no_sparse_mean = 0.000685682
sparse_mean = 0.000575437

# Plot the sparse results in a histogram of distribution of time, with two lines for the means
plt.figure(figsize=(10, 6))
plt.hist([b * 1000 for b in batch_sparse_results], bins=50, color="skyblue", label="Sparse Times")
plt.axvline(x=no_sparse_mean * 1000, color="r", linestyle="--", label="Dense Mean time")
plt.axvline(x=sparse_mean * 1000, color="g", linestyle="--", label="Sparse Mean time")
# plt.title("Sparse Multiplication on Random Batches Benchmark")
plt.xlabel("Time (ms)", fontsize=14)
plt.ylabel("Frequency", fontsize=14)
plt.legend(shadow=True, fontsize=12)

plt.savefig("sparse_multiplication_histogram.svg", dpi=300, bbox_inches='tight')
plt.show()
