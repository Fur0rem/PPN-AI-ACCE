/**
 * @file benchmarks/codelet_polybench_bt_c_y_solve_cell_line2884_0.cpp
 * @brief Benchmark extracted from the NAS Parallel Benchmarks (NPB) bt_c_y_solve_cell_line2884_0 codelet
 */

#include "bench_common.hpp"

int i = 63;
int grid_points[3] = {64, 64, 64};
int k = 63;
double lhs[64 / 2 * 2 + 1][64 / 2 * 2 + 1][64 / 2 * 2 + 1][3][5][5];
double rhs[64 / 2 * 2 + 1][64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];

BENCHMARK_FN(bt_c_y_solve_cell_line2884_loop_c_0_c, {
	int __arr_sub_0__ = grid_points[0];
	int __arr_sub_1__ = grid_points[2];
	int i2 = i;
	double piv3;
	double coeff4;
	int k5 = k;

	NO_VECTORISE_NO_UNROLL
	for (i2 = 1; i2 <= __arr_sub_0__ - 1 - 1; i2 += 1) {
		NO_VECTORISE_NO_UNROLL
		for (k5 = 1; k5 <= __arr_sub_1__ - 1 - 1; k5 += 1) {
			// piv3 = 1.0 / lhs[i2][0][k5][1][0][0];
			// lhs[i2][0][k5][1][0][1] = lhs[i2][0][k5][1][0][1] * piv3;
			// lhs[i2][0][k5][1][0][2] = lhs[i2][0][k5][1][0][2] * piv3;
			// lhs[i2][0][k5][1][0][3] = lhs[i2][0][k5][1][0][3] * piv3;
			// lhs[i2][0][k5][1][0][4] = lhs[i2][0][k5][1][0][4] * piv3;
			// lhs[i2][0][k5][2][0][0] = lhs[i2][0][k5][2][0][0] * piv3;
			// lhs[i2][0][k5][2][0][1] = lhs[i2][0][k5][2][0][1] * piv3;
			// lhs[i2][0][k5][2][0][2] = lhs[i2][0][k5][2][0][2] * piv3;
			// lhs[i2][0][k5][2][0][3] = lhs[i2][0][k5][2][0][3] * piv3;
			// lhs[i2][0][k5][2][0][4] = lhs[i2][0][k5][2][0][4] * piv3;
			// rhs[i2][0][k5][0] = rhs[i2][0][k5][0] * piv3;
			// coeff4 = lhs[i2][0][k5][1][1][0];
			// lhs[i2][0][k5][1][1][1] = lhs[i2][0][k5][1][1][1] - coeff4 *
			// lhs[i2][0][k5][1][0][1]; lhs[i2][0][k5][1][1][2] = lhs[i2][0][k5][1][1][2] -
			// coeff4 * lhs[i2][0][k5][1][0][2]; lhs[i2][0][k5][1][1][3] =
			// lhs[i2][0][k5][1][1][3] - coeff4 * lhs[i2][0][k5][1][0][3];
			// lhs[i2][0][k5][1][1][4] = lhs[i2][0][k5][1][1][4] - coeff4 *
			// lhs[i2][0][k5][1][0][4]; lhs[i2][0][k5][2][1][0] = lhs[i2][0][k5][2][1][0] -
			// coeff4 * lhs[i2][0][k5][2][0][0]; lhs[i2][0][k5][2][1][1] =
			// lhs[i2][0][k5][2][1][1] - coeff4 * lhs[i2][0][k5][2][0][1];
			// lhs[i2][0][k5][2][1][2] = lhs[i2][0][k5][2][1][2] - coeff4 *
			// lhs[i2][0][k5][2][0][2]; lhs[i2][0][k5][2][1][3] = lhs[i2][0][k5][2][1][3] -
			// coeff4 * lhs[i2][0][k5][2][0][3]; lhs[i2][0][k5][2][1][4] =
			// lhs[i2][0][k5][2][1][4] - coeff4 * lhs[i2][0][k5][2][0][4]; rhs[i2][0][k5][1] =
			// rhs[i2][0][k5][1] - coeff4 * rhs[i2][0][k5][0];
			// coeff4 = lhs[i2][0][k5][1][2][0];
			// lhs[i2][0][k5][1][2][1] = lhs[i2][0][k5][1][2][1] - coeff4 *
			// lhs[i2][0][k5][1][0][1]; lhs[i2][0][k5][1][2][2] = lhs[i2][0][k5][1][2][2] -
			// coeff4 * lhs[i2][0][k5][1][0][2]; lhs[i2][0][k5][1][2][3] =
			// lhs[i2][0][k5][1][2][3] - coeff4 * lhs[i2][0][k5][1][0][3];
			// lhs[i2][0][k5][1][2][4] = lhs[i2][0][k5][1][2][4] - coeff4 *
			// lhs[i2][0][k5][1][0][4]; lhs[i2][0][k5][2][2][0] = lhs[i2][0][k5][2][2][0] -
			// coeff4 * lhs[i2][0][k5][2][0][0]; lhs[i2][0][k5][2][2][1] =
			// lhs[i2][0][k5][2][2][1] - coeff4 * lhs[i2][0][k5][2][0][1];
			// lhs[i2][0][k5][2][2][2] = lhs[i2][0][k5][2][2][2] - coeff4 *
			// lhs[i2][0][k5][2][0][2]; lhs[i2][0][k5][2][2][3] = lhs[i2][0][k5][2][2][3] -
			// coeff4 * lhs[i2][0][k5][2][0][3]; lhs[i2][0][k5][2][2][4] =
			// lhs[i2][0][k5][2][2][4] - coeff4 * lhs[i2][0][k5][2][0][4]; rhs[i2][0][k5][2] =
			// rhs[i2][0][k5][2] - coeff4 * rhs[i2][0][k5][0];
			// coeff4 = lhs[i2][0][k5][1][3][0];
			// lhs[i2][0][k5][1][3][1] = lhs[i2][0][k5][1][3][1] - coeff4 *
			// lhs[i2][0][k5][1][0][1]; lhs[i2][0][k5][1][3][2] = lhs[i2][0][k5][1][3][2] -
			// coeff4 * lhs[i2][0][k5][1][0][2]; lhs[i2][0][k5][1][3][3] =
			// lhs[i2][0][k5][1][3][3] - coeff4 * lhs[i2][0][k5][1][0][3];
			// lhs[i2][0][k5][1][3][4] = lhs[i2][0][k5][1][3][4] - coeff4 *
			// lhs[i2][0][k5][1][0][4]; lhs[i2][0][k5][2][3][0] = lhs[i2][0][k5][2][3][0] -
			// coeff4 * lhs[i2][0][k5][2][0][0]; lhs[i2][0][k5][2][3][1] =
			// lhs[i2][0][k5][2][3][1] - coeff4 * lhs[i2][0][k5][2][0][1];
			// lhs[i2][0][k5][2][3][2] = lhs[i2][0][k5][2][3][2] - coeff4 *
			// lhs[i2][0][k5][2][0][2]; lhs[i2][0][k5][2][3][3] = lhs[i2][0][k5][2][3][3] -
			// coeff4 * lhs[i2][0][k5][2][0][3]; lhs[i2][0][k5][2][3][4] =
			// lhs[i2][0][k5][2][3][4] - coeff4 * lhs[i2][0][k5][2][0][4]; rhs[i2][0][k5][3] =
			// rhs[i2][0][k5][3] - coeff4 * rhs[i2][0][k5][0];
			// coeff4 = lhs[i2][0][k5][1][4][0];
			// lhs[i2][0][k5][1][4][1] = lhs[i2][0][k5][1][4][1] - coeff4 *
			// lhs[i2][0][k5][1][0][1]; lhs[i2][0][k5][1][4][2] = lhs[i2][0][k5][1][4][2] -
			// coeff4 * lhs[i2][0][k5][1][0][2]; lhs[i2][0][k5][1][4][3] =
			// lhs[i2][0][k5][1][4][3] - coeff4 * lhs[i2][0][k5][1][0][3];
			// lhs[i2][0][k5][1][4][4] = lhs[i2][0][k5][1][4][4] - coeff4 *
			// lhs[i2][0][k5][1][0][4]; lhs[i2][0][k5][2][4][0] = lhs[i2][0][k5][2][4][0] -
			// coeff4 * lhs[i2][0][k5][2][0][0]; lhs[i2][0][k5][2][4][1] =
			// lhs[i2][0][k5][2][4][1] - coeff4 * lhs[i2][0][k5][2][0][1];
			// lhs[i2][0][k5][2][4][2] = lhs[i2][0][k5][2][4][2] - coeff4 *
			// lhs[i2][0][k5][2][0][2]; lhs[i2][0][k5][2][4][3] = lhs[i2][0][k5][2][4][3] -
			// coeff4 * lhs[i2][0][k5][2][0][3]; lhs[i2][0][k5][2][4][4] =
			// lhs[i2][0][k5][2][4][4] - coeff4 * lhs[i2][0][k5][2][0][4]; rhs[i2][0][k5][4] =
			// rhs[i2][0][k5][4] - coeff4 * rhs[i2][0][k5][0]; piv3 = 1.0 /
			// lhs[i2][0][k5][1][1][1]; lhs[i2][0][k5][1][1][2] = lhs[i2][0][k5][1][1][2] * piv3;
			// lhs[i2][0][k5][1][1][3] = lhs[i2][0][k5][1][1][3] * piv3;
			// lhs[i2][0][k5][1][1][4] = lhs[i2][0][k5][1][1][4] * piv3;
			// lhs[i2][0][k5][2][1][0] = lhs[i2][0][k5][2][1][0] * piv3;
			// lhs[i2][0][k5][2][1][1] = lhs[i2][0][k5][2][1][1] * piv3;
			// lhs[i2][0][k5][2][1][2] = lhs[i2][0][k5][2][1][2] * piv3;
			// lhs[i2][0][k5][2][1][3] = lhs[i2][0][k5][2][1][3] * piv3;
			// lhs[i2][0][k5][2][1][4] = lhs[i2][0][k5][2][1][4] * piv3;
			// rhs[i2][0][k5][1] = rhs[i2][0][k5][1] * piv3;
			// coeff4 = lhs[i2][0][k5][1][0][1];
			// lhs[i2][0][k5][1][0][2] = lhs[i2][0][k5][1][0][2] - coeff4 *
			// lhs[i2][0][k5][1][1][2]; lhs[i2][0][k5][1][0][3] = lhs[i2][0][k5][1][0][3] -
			// coeff4 * lhs[i2][0][k5][1][1][3]; lhs[i2][0][k5][1][0][4] =
			// lhs[i2][0][k5][1][0][4] - coeff4 * lhs[i2][0][k5][1][1][4];
			// lhs[i2][0][k5][2][0][0] = lhs[i2][0][k5][2][0][0] - coeff4 *
			// lhs[i2][0][k5][2][1][0]; lhs[i2][0][k5][2][0][1] = lhs[i2][0][k5][2][0][1] -
			// coeff4 * lhs[i2][0][k5][2][1][1]; lhs[i2][0][k5][2][0][2] =
			// lhs[i2][0][k5][2][0][2] - coeff4 * lhs[i2][0][k5][2][1][2];
			// lhs[i2][0][k5][2][0][3] = lhs[i2][0][k5][2][0][3] - coeff4 *
			// lhs[i2][0][k5][2][1][3]; lhs[i2][0][k5][2][0][4] = lhs[i2][0][k5][2][0][4] -
			// coeff4 * lhs[i2][0][k5][2][1][4]; rhs[i2][0][k5][0] = rhs[i2][0][k5][0] -
			// coeff4 * rhs[i2][0][k5][1];
			// coeff4 = lhs[i2][0][k5][1][2][1];
			// lhs[i2][0][k5][1][2][2] = lhs[i2][0][k5][1][2][2] - coeff4 *
			// lhs[i2][0][k5][1][1][2]; lhs[i2][0][k5][1][2][3] = lhs[i2][0][k5][1][2][3] -
			// coeff4 * lhs[i2][0][k5][1][1][3]; lhs[i2][0][k5][1][2][4] =
			// lhs[i2][0][k5][1][2][4] - coeff4 * lhs[i2][0][k5][1][1][4];
			// lhs[i2][0][k5][2][2][0] = lhs[i2][0][k5][2][2][0] - coeff4 *
			// lhs[i2][0][k5][2][1][0]; lhs[i2][0][k5][2][2][1] = lhs[i2][0][k5][2][2][1] -
			// coeff4 * lhs[i2][0][k5][2][1][1]; lhs[i2][0][k5][2][2][2] =
			// lhs[i2][0][k5][2][2][2] - coeff4 * lhs[i2][0][k5][2][1][2];
			// lhs[i2][0][k5][2][2][3] = lhs[i2][0][k5][2][2][3] - coeff4 *
			// lhs[i2][0][k5][2][1][3]; lhs[i2][0][k5][2][2][4] = lhs[i2][0][k5][2][2][4] -
			// coeff4 * lhs[i2][0][k5][2][1][4]; rhs[i2][0][k5][2] = rhs[i2][0][k5][2] -
			// coeff4 * rhs[i2][0][k5][1];
			// coeff4 = lhs[i2][0][k5][1][3][1];
			// lhs[i2][0][k5][1][3][2] = lhs[i2][0][k5][1][3][2] - coeff4 *
			// lhs[i2][0][k5][1][1][2]; lhs[i2][0][k5][1][3][3] = lhs[i2][0][k5][1][3][3] -
			// coeff4 * lhs[i2][0][k5][1][1][3]; lhs[i2][0][k5][1][3][4] =
			// lhs[i2][0][k5][1][3][4] - coeff4 * lhs[i2][0][k5][1][1][4];
			// lhs[i2][0][k5][2][3][0] = lhs[i2][0][k5][2][3][0] - coeff4 *
			// lhs[i2][0][k5][2][1][0]; lhs[i2][0][k5][2][3][1] = lhs[i2][0][k5][2][3][1] -
			// coeff4 * lhs[i2][0][k5][2][1][1]; lhs[i2][0][k5][2][3][2] =
			// lhs[i2][0][k5][2][3][2] - coeff4 * lhs[i2][0][k5][2][1][2];
			// lhs[i2][0][k5][2][3][3] = lhs[i2][0][k5][2][3][3] - coeff4 *
			// lhs[i2][0][k5][2][1][3]; lhs[i2][0][k5][2][3][4] = lhs[i2][0][k5][2][3][4] -
			// coeff4 * lhs[i2][0][k5][2][1][4]; rhs[i2][0][k5][3] = rhs[i2][0][k5][3] -
			// coeff4 * rhs[i2][0][k5][1];
			// coeff4 = lhs[i2][0][k5][1][4][1];
			// lhs[i2][0][k5][1][4][2] = lhs[i2][0][k5][1][4][2] - coeff4 *
			// lhs[i2][0][k5][1][1][2]; lhs[i2][0][k5][1][4][3] = lhs[i2][0][k5][1][4][3] -
			// coeff4 * lhs[i2][0][k5][1][1][3]; lhs[i2][0][k5][1][4][4] =
			// lhs[i2][0][k5][1][4][4] - coeff4 * lhs[i2][0][k5][1][1][4];
			// lhs[i2][0][k5][2][4][0] = lhs[i2][0][k5][2][4][0] - coeff4 *
			// lhs[i2][0][k5][2][1][0]; lhs[i2][0][k5][2][4][1] = lhs[i2][0][k5][2][4][1] -
			// coeff4 * lhs[i2][0][k5][2][1][1]; lhs[i2][0][k5][2][4][2] =
			// lhs[i2][0][k5][2][4][2] - coeff4 * lhs[i2][0][k5][2][1][2];
			// lhs[i2][0][k5][2][4][3] = lhs[i2][0][k5][2][4][3] - coeff4 *
			// lhs[i2][0][k5][2][1][3]; lhs[i2][0][k5][2][4][4] = lhs[i2][0][k5][2][4][4] -
			// coeff4 * lhs[i2][0][k5][2][1][4]; rhs[i2][0][k5][4] = rhs[i2][0][k5][4] -
			// coeff4 * rhs[i2][0][k5][1]; piv3 = 1.0 / lhs[i2][0][k5][1][2][2];
			// lhs[i2][0][k5][1][2][3] = lhs[i2][0][k5][1][2][3] * piv3;
			// lhs[i2][0][k5][1][2][4] = lhs[i2][0][k5][1][2][4] * piv3;
			// lhs[i2][0][k5][2][2][0] = lhs[i2][0][k5][2][2][0] * piv3;
			// lhs[i2][0][k5][2][2][1] = lhs[i2][0][k5][2][2][1] * piv3;
			// lhs[i2][0][k5][2][2][2] = lhs[i2][0][k5][2][2][2] * piv3;
			// lhs[i2][0][k5][2][2][3] = lhs[i2][0][k5][2][2][3] * piv3;
			// lhs[i2][0][k5][2][2][4] = lhs[i2][0][k5][2][2][4] * piv3;
			// rhs[i2][0][k5][2] = rhs[i2][0][k5][2] * piv3;
			// coeff4 = lhs[i2][0][k5][1][0][2];
			// lhs[i2][0][k5][1][0][3] = lhs[i2][0][k5][1][0][3] - coeff4 *
			// lhs[i2][0][k5][1][2][3]; lhs[i2][0][k5][1][0][4] = lhs[i2][0][k5][1][0][4] -
			// coeff4 * lhs[i2][0][k5][1][2][4]; lhs[i2][0][k5][2][0][0] =
			// lhs[i2][0][k5][2][0][0] - coeff4 * lhs[i2][0][k5][2][2][0];
			// lhs[i2][0][k5][2][0][1] = lhs[i2][0][k5][2][0][1] - coeff4 *
			// lhs[i2][0][k5][2][2][1]; lhs[i2][0][k5][2][0][2] = lhs[i2][0][k5][2][0][2] -
			// coeff4 * lhs[i2][0][k5][2][2][2]; lhs[i2][0][k5][2][0][3] =
			// lhs[i2][0][k5][2][0][3] - coeff4 * lhs[i2][0][k5][2][2][3];
			// lhs[i2][0][k5][2][0][4] = lhs[i2][0][k5][2][0][4] - coeff4 *
			// lhs[i2][0][k5][2][2][4]; rhs[i2][0][k5][0] = rhs[i2][0][k5][0] - coeff4 *
			// rhs[i2][0][k5][2];
			// coeff4 = lhs[i2][0][k5][1][1][2];
			// lhs[i2][0][k5][1][1][3] = lhs[i2][0][k5][1][1][3] - coeff4 *
			// lhs[i2][0][k5][1][2][3]; lhs[i2][0][k5][1][1][4] = lhs[i2][0][k5][1][1][4] -
			// coeff4 * lhs[i2][0][k5][1][2][4]; lhs[i2][0][k5][2][1][0] =
			// lhs[i2][0][k5][2][1][0] - coeff4 * lhs[i2][0][k5][2][2][0];
			// lhs[i2][0][k5][2][1][1] = lhs[i2][0][k5][2][1][1] - coeff4 *
			// lhs[i2][0][k5][2][2][1]; lhs[i2][0][k5][2][1][2] = lhs[i2][0][k5][2][1][2] -
			// coeff4 * lhs[i2][0][k5][2][2][2]; lhs[i2][0][k5][2][1][3] =
			// lhs[i2][0][k5][2][1][3] - coeff4 * lhs[i2][0][k5][2][2][3];
			// lhs[i2][0][k5][2][1][4] = lhs[i2][0][k5][2][1][4] - coeff4 *
			// lhs[i2][0][k5][2][2][4]; rhs[i2][0][k5][1] = rhs[i2][0][k5][1] - coeff4 *
			// rhs[i2][0][k5][2];
			// coeff4 = lhs[i2][0][k5][1][3][2];
			// lhs[i2][0][k5][1][3][3] = lhs[i2][0][k5][1][3][3] - coeff4 *
			// lhs[i2][0][k5][1][2][3]; lhs[i2][0][k5][1][3][4] = lhs[i2][0][k5][1][3][4] -
			// coeff4 * lhs[i2][0][k5][1][2][4]; lhs[i2][0][k5][2][3][0] =
			// lhs[i2][0][k5][2][3][0] - coeff4 * lhs[i2][0][k5][2][2][0];
			// lhs[i2][0][k5][2][3][1] = lhs[i2][0][k5][2][3][1] - coeff4 *
			// lhs[i2][0][k5][2][2][1]; lhs[i2][0][k5][2][3][2] = lhs[i2][0][k5][2][3][2] -
			// coeff4 * lhs[i2][0][k5][2][2][2]; lhs[i2][0][k5][2][3][3] =
			// lhs[i2][0][k5][2][3][3] - coeff4 * lhs[i2][0][k5][2][2][3];
			// lhs[i2][0][k5][2][3][4] = lhs[i2][0][k5][2][3][4] - coeff4 *
			// lhs[i2][0][k5][2][2][4]; rhs[i2][0][k5][3] = rhs[i2][0][k5][3] - coeff4 *
			// rhs[i2][0][k5][2];
			// coeff4 = lhs[i2][0][k5][1][4][2];
			// lhs[i2][0][k5][1][4][3] = lhs[i2][0][k5][1][4][3] - coeff4 *
			// lhs[i2][0][k5][1][2][3]; lhs[i2][0][k5][1][4][4] = lhs[i2][0][k5][1][4][4] -
			// coeff4 * lhs[i2][0][k5][1][2][4]; lhs[i2][0][k5][2][4][0] =
			// lhs[i2][0][k5][2][4][0] - coeff4 * lhs[i2][0][k5][2][2][0];
			// lhs[i2][0][k5][2][4][1] = lhs[i2][0][k5][2][4][1] - coeff4 *
			// lhs[i2][0][k5][2][2][1]; lhs[i2][0][k5][2][4][2] = lhs[i2][0][k5][2][4][2] -
			// coeff4 * lhs[i2][0][k5][2][2][2]; lhs[i2][0][k5][2][4][3] =
			// lhs[i2][0][k5][2][4][3] - coeff4 * lhs[i2][0][k5][2][2][3];
			// lhs[i2][0][k5][2][4][4] = lhs[i2][0][k5][2][4][4] - coeff4 *
			// lhs[i2][0][k5][2][2][4]; rhs[i2][0][k5][4] = rhs[i2][0][k5][4] - coeff4 *
			// rhs[i2][0][k5][2]; piv3 = 1.0 / lhs[i2][0][k5][1][3][3]; lhs[i2][0][k5][1][3][4] =
			// lhs[i2][0][k5][1][3][4] * piv3; lhs[i2][0][k5][2][3][0] = lhs[i2][0][k5][2][3][0] *
			// piv3; lhs[i2][0][k5][2][3][1] = lhs[i2][0][k5][2][3][1] * piv3; lhs[i2][0][k5][2][3][2]
			// = lhs[i2][0][k5][2][3][2] * piv3; lhs[i2][0][k5][2][3][3] = lhs[i2][0][k5][2][3][3] *
			// piv3; lhs[i2][0][k5][2][3][4] = lhs[i2][0][k5][2][3][4] * piv3; rhs[i2][0][k5][3] =
			// rhs[i2][0][k5][3] * piv3;
			// coeff4 = lhs[i2][0][k5][1][0][3];
			// lhs[i2][0][k5][1][0][4] = lhs[i2][0][k5][1][0][4] - coeff4 *
			// lhs[i2][0][k5][1][3][4]; lhs[i2][0][k5][2][0][0] = lhs[i2][0][k5][2][0][0] -
			// coeff4 * lhs[i2][0][k5][2][3][0]; lhs[i2][0][k5][2][0][1] =
			// lhs[i2][0][k5][2][0][1] - coeff4 * lhs[i2][0][k5][2][3][1];
			// lhs[i2][0][k5][2][0][2] = lhs[i2][0][k5][2][0][2] - coeff4 *
			// lhs[i2][0][k5][2][3][2]; lhs[i2][0][k5][2][0][3] = lhs[i2][0][k5][2][0][3] -
			// coeff4 * lhs[i2][0][k5][2][3][3]; lhs[i2][0][k5][2][0][4] =
			// lhs[i2][0][k5][2][0][4] - coeff4 * lhs[i2][0][k5][2][3][4]; rhs[i2][0][k5][0] =
			// rhs[i2][0][k5][0] - coeff4 * rhs[i2][0][k5][3];
			// coeff4 = lhs[i2][0][k5][1][1][3];
			// lhs[i2][0][k5][1][1][4] = lhs[i2][0][k5][1][1][4] - coeff4 *
			// lhs[i2][0][k5][1][3][4]; lhs[i2][0][k5][2][1][0] = lhs[i2][0][k5][2][1][0] -
			// coeff4 * lhs[i2][0][k5][2][3][0]; lhs[i2][0][k5][2][1][1] =
			// lhs[i2][0][k5][2][1][1] - coeff4 * lhs[i2][0][k5][2][3][1];
			// lhs[i2][0][k5][2][1][2] = lhs[i2][0][k5][2][1][2] - coeff4 *
			// lhs[i2][0][k5][2][3][2]; lhs[i2][0][k5][2][1][3] = lhs[i2][0][k5][2][1][3] -
			// coeff4 * lhs[i2][0][k5][2][3][3]; lhs[i2][0][k5][2][1][4] =
			// lhs[i2][0][k5][2][1][4] - coeff4 * lhs[i2][0][k5][2][3][4]; rhs[i2][0][k5][1] =
			// rhs[i2][0][k5][1] - coeff4 * rhs[i2][0][k5][3];
			// coeff4 = lhs[i2][0][k5][1][2][3];
			// lhs[i2][0][k5][1][2][4] = lhs[i2][0][k5][1][2][4] - coeff4 *
			// lhs[i2][0][k5][1][3][4]; lhs[i2][0][k5][2][2][0] = lhs[i2][0][k5][2][2][0] -
			// coeff4 * lhs[i2][0][k5][2][3][0]; lhs[i2][0][k5][2][2][1] =
			// lhs[i2][0][k5][2][2][1] - coeff4 * lhs[i2][0][k5][2][3][1];
			// lhs[i2][0][k5][2][2][2] = lhs[i2][0][k5][2][2][2] - coeff4 *
			// lhs[i2][0][k5][2][3][2]; lhs[i2][0][k5][2][2][3] = lhs[i2][0][k5][2][2][3] -
			// coeff4 * lhs[i2][0][k5][2][3][3]; lhs[i2][0][k5][2][2][4] =
			// lhs[i2][0][k5][2][2][4] - coeff4 * lhs[i2][0][k5][2][3][4]; rhs[i2][0][k5][2] =
			// rhs[i2][0][k5][2] - coeff4 * rhs[i2][0][k5][3];
			// coeff4 = lhs[i2][0][k5][1][4][3];
			// lhs[i2][0][k5][1][4][4] = lhs[i2][0][k5][1][4][4] - coeff4 *
			// lhs[i2][0][k5][1][3][4]; lhs[i2][0][k5][2][4][0] = lhs[i2][0][k5][2][4][0] -
			// coeff4 * lhs[i2][0][k5][2][3][0]; lhs[i2][0][k5][2][4][1] =
			// lhs[i2][0][k5][2][4][1] - coeff4 * lhs[i2][0][k5][2][3][1];
			// lhs[i2][0][k5][2][4][2] = lhs[i2][0][k5][2][4][2] - coeff4 *
			// lhs[i2][0][k5][2][3][2]; lhs[i2][0][k5][2][4][3] = lhs[i2][0][k5][2][4][3] -
			// coeff4 * lhs[i2][0][k5][2][3][3]; lhs[i2][0][k5][2][4][4] =
			// lhs[i2][0][k5][2][4][4] - coeff4 * lhs[i2][0][k5][2][3][4]; rhs[i2][0][k5][4] =
			// rhs[i2][0][k5][4] - coeff4 * rhs[i2][0][k5][3]; piv3 = 1.0 /
			// lhs[i2][0][k5][1][4][4]; lhs[i2][0][k5][2][4][0] = lhs[i2][0][k5][2][4][0] * piv3;
			// lhs[i2][0][k5][2][4][1] = lhs[i2][0][k5][2][4][1] * piv3;
			// lhs[i2][0][k5][2][4][2] = lhs[i2][0][k5][2][4][2] * piv3;
			// lhs[i2][0][k5][2][4][3] = lhs[i2][0][k5][2][4][3] * piv3;
			// lhs[i2][0][k5][2][4][4] = lhs[i2][0][k5][2][4][4] * piv3;
			// rhs[i2][0][k5][4] = rhs[i2][0][k5][4] * piv3;
			// coeff4 = lhs[i2][0][k5][1][0][4];
			// lhs[i2][0][k5][2][0][0] = lhs[i2][0][k5][2][0][0] - coeff4 *
			// lhs[i2][0][k5][2][4][0]; lhs[i2][0][k5][2][0][1] = lhs[i2][0][k5][2][0][1] -
			// coeff4 * lhs[i2][0][k5][2][4][1]; lhs[i2][0][k5][2][0][2] =
			// lhs[i2][0][k5][2][0][2] - coeff4 * lhs[i2][0][k5][2][4][2];
			// lhs[i2][0][k5][2][0][3] = lhs[i2][0][k5][2][0][3] - coeff4 *
			// lhs[i2][0][k5][2][4][3]; lhs[i2][0][k5][2][0][4] = lhs[i2][0][k5][2][0][4] -
			// coeff4 * lhs[i2][0][k5][2][4][4]; rhs[i2][0][k5][0] = rhs[i2][0][k5][0] -
			// coeff4 * rhs[i2][0][k5][4];
			// coeff4 = lhs[i2][0][k5][1][1][4];
			// lhs[i2][0][k5][2][1][0] = lhs[i2][0][k5][2][1][0] - coeff4 *
			// lhs[i2][0][k5][2][4][0]; lhs[i2][0][k5][2][1][1] = lhs[i2][0][k5][2][1][1] -
			// coeff4 * lhs[i2][0][k5][2][4][1]; lhs[i2][0][k5][2][1][2] =
			// lhs[i2][0][k5][2][1][2] - coeff4 * lhs[i2][0][k5][2][4][2];
			// lhs[i2][0][k5][2][1][3] = lhs[i2][0][k5][2][1][3] - coeff4 *
			// lhs[i2][0][k5][2][4][3]; lhs[i2][0][k5][2][1][4] = lhs[i2][0][k5][2][1][4] -
			// coeff4 * lhs[i2][0][k5][2][4][4]; rhs[i2][0][k5][1] = rhs[i2][0][k5][1] -
			// coeff4 * rhs[i2][0][k5][4];
			// coeff4 = lhs[i2][0][k5][1][2][4];
			// lhs[i2][0][k5][2][2][0] = lhs[i2][0][k5][2][2][0] - coeff4 *
			// lhs[i2][0][k5][2][4][0]; lhs[i2][0][k5][2][2][1] = lhs[i2][0][k5][2][2][1] -
			// coeff4 * lhs[i2][0][k5][2][4][1]; lhs[i2][0][k5][2][2][2] =
			// lhs[i2][0][k5][2][2][2] - coeff4 * lhs[i2][0][k5][2][4][2];
			// lhs[i2][0][k5][2][2][3] = lhs[i2][0][k5][2][2][3] - coeff4 *
			// lhs[i2][0][k5][2][4][3]; lhs[i2][0][k5][2][2][4] = lhs[i2][0][k5][2][2][4] -
			// coeff4 * lhs[i2][0][k5][2][4][4]; rhs[i2][0][k5][2] = rhs[i2][0][k5][2] -
			// coeff4 * rhs[i2][0][k5][4];
			// coeff4 = lhs[i2][0][k5][1][3][4];
			// lhs[i2][0][k5][2][3][0] = lhs[i2][0][k5][2][3][0] - coeff4 *
			// lhs[i2][0][k5][2][4][0]; lhs[i2][0][k5][2][3][1] = lhs[i2][0][k5][2][3][1] -
			// coeff4 * lhs[i2][0][k5][2][4][1]; lhs[i2][0][k5][2][3][2] =
			// lhs[i2][0][k5][2][3][2] - coeff4 * lhs[i2][0][k5][2][4][2];
			// lhs[i2][0][k5][2][3][3] = lhs[i2][0][k5][2][3][3] - coeff4 *
			// lhs[i2][0][k5][2][4][3]; lhs[i2][0][k5][2][3][4] = lhs[i2][0][k5][2][3][4] -
			// coeff4 * lhs[i2][0][k5][2][4][4]; rhs[i2][0][k5][3] = rhs[i2][0][k5][3] -
			// coeff4 * rhs[i2][0][k5][4];

			NO_VECTORISE_NO_UNROLL
			for (int i2 = 0; i2 < 3; i2 += 1) {
				NO_VECTORISE_NO_UNROLL
				for (int k5 = 0; k5 < 5; k5 += 1) {
					NO_VECTORISE_NO_UNROLL
					for (int j = 0; j < 5; j += 1) {
						coeff4 = lhs[i2][0][k5][1][j][0];
						lhs[i2][0][k5][1][j][1] = lhs[i2][0][k5][1][j][1] - coeff4 * lhs[i2][0][k5][1][j][1];
						lhs[i2][0][k5][1][j][2] = lhs[i2][0][k5][1][j][2] - coeff4 * lhs[i2][0][k5][1][j][2];
						lhs[i2][0][k5][1][j][3] = lhs[i2][0][k5][1][j][3] - coeff4 * lhs[i2][0][k5][1][j][3];
						lhs[i2][0][k5][1][j][4] = lhs[i2][0][k5][1][j][4] - coeff4 * lhs[i2][0][k5][1][j][4];
						lhs[i2][0][k5][2][j][0] = lhs[i2][0][k5][2][j][0] - coeff4 * lhs[i2][0][k5][2][j][0];
						lhs[i2][0][k5][2][j][1] = lhs[i2][0][k5][2][j][1] - coeff4 * lhs[i2][0][k5][2][j][1];
						lhs[i2][0][k5][2][j][2] = lhs[i2][0][k5][2][j][2] - coeff4 * lhs[i2][0][k5][2][j][2];
						lhs[i2][0][k5][2][j][3] = lhs[i2][0][k5][2][j][3] - coeff4 * lhs[i2][0][k5][2][j][3];
						rhs[i2][0][k5][j] = rhs[i2][0][k5][j] - coeff4 * rhs[i2][0][k5][j];
						piv3 = 1.0 / lhs[i2][0][k5][1][j][j];
						lhs[i2][0][k5][1][j][1] = lhs[i2][0][k5][1][j][1] * piv3;
					}
				}
			}
		}
	}

	i = i2;
	k = k5;
})

/**
 * @brief Run the benchmarks for bt_c_y_solve_cell_line2884_loop_c_0_c
 */
int main() {
	std::ostringstream oss;
	auto result = BENCHMARK_INIT(10, oss).RUN(bt_c_y_solve_cell_line2884_loop_c_0_c).results();

	// std::cout << oss.str();

	for (auto const& res : result) {
		auto measure = res.fromString("cpucycles");
		auto name = res.config().mBenchmarkName;
		std::cout << name << " : ";
		std::cout << res.median(measure) << " cycles\n";
	}

	return 0;
}